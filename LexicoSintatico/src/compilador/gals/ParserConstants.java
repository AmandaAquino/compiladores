package compilador.gals;

public interface ParserConstants {
	int START_SYMBOL = 52;

	int FIRST_NON_TERMINAL = 52;
	int FIRST_SEMANTIC_ACTION = 86;

	int[][] PARSER_TABLE = {
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1,
					1, -1, -1, -1, -1, -1, -1, 1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 2, 2, 2,
					2, -1, -1, -1, -1, -1, -1, 2 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 6,
					5, 4, -1, -1, -1, -1, -1, -1, 7 },
			{ -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, 13, 13, -1, 13, -1, -1, 12, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, 15, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, 19, -1, 20, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, 22, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, 24, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 25, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, 37, -1, -1, 30, -1, -1, -1, 32, 37, -1, 33, -1, 34, 35, 36, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, 42, -1, 43, -1, -1, 41, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, 44, 44, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, 44, 44, -1, -1, 44, -1, -1 },
			{ -1, -1, 46, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, 47, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, 47, 47, -1, -1, 47, -1, -1 },
			{ -1, -1, 49, 49, -1, -1, -1, 49, 49, 48, -1, -1, -1, -1, -1, 48, 48, 48, 48, 48, -1, 49, -1, -1, -1, -1, -1, -1, -1, 49, 49, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, 51, 52, 54, 53, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 56, 56, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, 56, 56, -1, -1, 56, -1, -1 },
			{ -1, -1, 58, 58, -1, -1, -1, 58, 58, 58, -1, -1, -1, 57, 57, 58, 58, 58, 58, 58, -1, 58, -1, -1, -1, -1, -1, -1, -1, 58, 58, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, 57, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, 61, -1, -1, -1, -1 },
			{ -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 62, 62, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, 62, 62, -1, -1, 62, -1, -1 },
			{ -1, -1, 64, 64, -1, -1, -1, 64, 64, 64, -1, 63, 63, 64, 64, 64, 64, 64, 64, 64, -1, 64, -1, -1, -1, -1, -1, -1, -1, 64, 64, -1, 64, -1, -1, -1, -1, -1, -1, 63, -1,
					-1, -1, -1, -1, -1, 64, 63, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, -1,
					-1, -1, -1, -1, -1, -1, 68, -1, -1, -1 },
			{ -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, 72, 73, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, 73, 73, -1, -1, 69, -1, -1 },
			{ -1, 74, 76, 76, -1, -1, 75, 76, 76, 76, -1, 76, 76, 76, 76, 76, 76, 76, 76, 76, -1, 76, -1, -1, -1, -1, -1, -1, -1, 76, 76, -1, 76, -1, -1, -1, -1, -1, -1, 76, -1,
					-1, -1, -1, -1, -1, 76, 76, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, 77, 78, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, 78, 78, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 83, -1, 79, 80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, 82, 81, -1, -1, -1, -1, -1 }
	};

	int[][] PRODUCTIONS = {
			{ 28, 25, 4, 53, 5 },
			{ 54, 60, 66 },
			{ 55, 56, 57, 59, 4, 54 },
			{ 0 },
			{ 44 },
			{ 43 },
			{ 42 },
			{ 51 },
			{ 41, 7, 84, 8 },
			{ 7, 84, 8 },
			{ 0 },
			{ 25, 58 },
			{ 9, 57 },
			{ 0 },
			{ 10, 84 },
			{ 0 },
			{ 61, 4, 60 },
			{ 0 },
			{ 37, 25, 62, 64, 4, 53 },
			{ 2, 65, 57, 6, 55, 63, 3 },
			{ 0 },
			{ 4, 65, 57, 6, 55, 63 },
			{ 0 },
			{ 6, 55 },
			{ 0 },
			{ 39 },
			{ 38 },
			{ 21, 68, 67, 22 },
			{ 4, 68, 67 },
			{ 0 },
			{ 25, 70 },
			{ 66 },
			{ 29, 73, 31, 68, 69 },
			{ 32, 73, 33, 68 },
			{ 34, 2, 57, 3 },
			{ 35, 2, 71, 3 },
			{ 36, 73 },
			{ 0 },
			{ 30, 68 },
			{ 0 },
			{ 11, 73 },
			{ 7, 73, 8, 11, 73 },
			{ 2, 71, 3 },
			{ 0 },
			{ 73, 72 },
			{ 9, 73, 72 },
			{ 0 },
			{ 76, 74 },
			{ 75, 76 },
			{ 0 },
			{ 10 },
			{ 16 },
			{ 17 },
			{ 19 },
			{ 18 },
			{ 20 },
			{ 79, 77 },
			{ 78, 79, 77 },
			{ 0 },
			{ 15 },
			{ 14 },
			{ 47 },
			{ 82, 80 },
			{ 81, 82, 80 },
			{ 0 },
			{ 12 },
			{ 13 },
			{ 40 },
			{ 48 },
			{ 49, 82 },
			{ 14, 82 },
			{ 2, 73, 3 },
			{ 25, 83 },
			{ 85 },
			{ 2, 73, 72, 3 },
			{ 7, 73, 8 },
			{ 0 },
			{ 25 },
			{ 85 },
			{ 26 },
			{ 27 },
			{ 46 },
			{ 45 },
			{ 24 }
	};

	String[] PARSER_ERROR = {
			"",
			"Era esperado fim de programa",
			"Era esperado \"(\"",
			"Era esperado \")\"",
			"Era esperado \";\"",
			"Era esperado \".\"",
			"Era esperado \":\"",
			"Era esperado \"[\"",
			"Era esperado \"]\"",
			"Era esperado \",\"",
			"Era esperado \"=\"",
			"Era esperado \":=\"",
			"Era esperado \"*\"",
			"Era esperado \"/\"",
			"Era esperado \"-\"",
			"Era esperado \"+\"",
			"Era esperado \"<\"",
			"Era esperado \">\"",
			"Era esperado \"<=\"",
			"Era esperado \">=\"",
			"Era esperado \"<>\"",
			"Era esperado \"{\"",
			"Era esperado \"}\"",
			"Era esperado \"'\"",
			"Era esperado literal",
			"Era esperado id",
			"Era esperado num_int",
			"Era esperado num_real",
			"Era esperado programa",
			"Era esperado se",
			"Era esperado senao",
			"Era esperado entao",
			"Era esperado enquanto",
			"Era esperado faca",
			"Era esperado leia",
			"Era esperado escreva",
			"Era esperado retorne",
			"Era esperado metodo",
			"Era esperado val",
			"Era esperado ref",
			"Era esperado div",
			"Era esperado cadeia",
			"Era esperado booleano",
			"Era esperado real",
			"Era esperado inteiro",
			"Era esperado verdadeiro",
			"Era esperado falso",
			"Era esperado ou",
			"Era esperado e",
			"Era esperado nao",
			"Era esperado fim",
			"Era esperado caracter",
			"Era esperado programa", // <programa> inválido",
			"Era esperado metodo, cadeia, booleano, real, inteiro, caracter , {", // "<bloco> inválido",
			"Era esperado cadeia, booleano, real, inteiro, caracter", // "<dcl_var_const> inválido",
			"Era esperado cadeia, booleano, real, inteiro, caracter", // "<tipo> inválido",
			"Era esperado [", // "<dimensao> inválido",
			"Era esperado identificador", // "<lid> inválido",
			"Era esperado , ", // "<rep_lid> inválido",
			"Era esperado = ", // "<fator_const> inválido",
			"Era esperado metodo ", // "<dcl_metodos> inválido",
			"Era esperado metodo ", // "<dcl_metodo> inválido",
			"Era esperado ( ", // "<par_formais> inválido",
			"Era esperado ; ", // "<rep_par> inválido",
			"Era esperado : ", // "<tipo_metodo> inválido",
			"Era esperado val, ref ", // "<mp_par> inválido",
			"Era esperado { ", // "<com_composto> inválido",
			"Era esperado ; ", // "<replistacomando> inválido",
			"Era esperado id, se, enquanto, leia, escreva, retorne , {", // "<comando> inválido",
			"Era esperado senao ", // "<senaoparte> inválido",
			"Era esperado ( , [ , := ", // "<rcomid> inválido",
			"Era esperado  literal, id, num_int, num_real, verdadeiro, falso, nao , ( , -", // "<lista_expr> inválido",
			"Era esperado , ", // "<rep_lexpr> inválido",
			"Era esperado literal, id, num_int, num_real, verdadeiro, falso, nao , ( , -", // "<expressao> inválido",
			"Era esperado = , < , > , <= , >= , <> ", // "<resto_expressao> inválido",
			"Era esperado  = , < , > , <= , >= , <> ", // "<oprel> inválido",
			"Era esperado  literal, id, num_int, num_real, verdadeiro, falso, nao , ( , -", // "<expsimp> inválido",
			"Era esperado - , + , ou", // "<rep_expsimp> inválido",
			"Era esperado - , + , ou", // "<op_add> inválido",
			"Era esperado literal, id, num_int, num_real, verdadeiro, falso, nao , ( , -", // "<termo> inválido",
			"Era esperado * , / , div , e", // "<rep_termo> inválido",
			"Era esperado * , / , div , e", // "<op_mult> inválido",
			"Era esperado literal, id, num_int, num_real, verdadeiro, falso, nao , ( , - ", // "<fator> inválido",
			"Era esperado ( , [ ", // "<rvar> inválido",
			"Era esperado literal, id, num_int, num_real, verdadeiro, falso ", // "<constante> inválido",
			"Era esperado literal, num_int, num_real, verdadeiro, falso", // "<constante_explicita> inválido"
	};
}
