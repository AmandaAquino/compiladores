package compilador.gals;

public interface ParserConstants
{
    int START_SYMBOL = 50;

    int FIRST_NON_TERMINAL    = 50;
    int FIRST_SEMANTIC_ACTION = 84;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1,  1,  1,  1,  1, -1, -1, -1, -1, -1,  1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1,  2,  2,  2,  2, -1, -1, -1, -1, -1,  2 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  8,  6,  5,  4, -1, -1, -1, -1, -1,  7 },
        { -1, -1, -1, -1, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 13, 13, -1, 13, -1, -1, 12, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 15, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 19, -1, 20, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 22, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 24, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, 37, -1, 30, -1, -1, -1, 32, 37, -1, 33, -1, 34, 35, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 42, -1, 43, -1, -1, 41, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, 44, 44, 44, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, 44, -1, -1, 44, -1 },
        { -1, -1, 46, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, 47, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, -1, -1, 47, -1 },
        { -1, -1, 49, 49, -1, -1, -1, 49, 49, 48, -1, -1, -1, -1, -1, 48, 48, 48, 48, 48, -1, 49, -1, -1, -1, -1, -1, -1, 49, 49, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, 51, 52, 54, 53, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, 56, 56, 56, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 56, -1, -1, 56, -1 },
        { -1, -1, 58, 58, -1, -1, -1, 58, 58, 58, -1, -1, -1, 57, 57, 58, 58, 58, 58, 58, -1, 58, -1, -1, -1, -1, -1, -1, 58, 58, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, -1, -1, -1 },
        { -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, 62, 62, 62, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 62, -1, -1, 62, -1 },
        { -1, -1, 64, 64, -1, -1, -1, 64, 64, 64, -1, 63, 63, 64, 64, 64, 64, 64, 64, 64, -1, 64, -1, -1, -1, -1, -1, -1, 64, 64, -1, 64, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, 64, 63, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, 68, -1, -1 },
        { -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1, 73, 72, 73, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, 73, -1, -1, 69, -1 },
        { -1, 74, 76, 76, -1, -1, 75, 76, 76, 76, -1, 76, 76, 76, 76, 76, 76, 76, 76, 76, -1, 76, -1, -1, -1, -1, -1, -1, 76, 76, -1, 76, -1, -1, -1, -1, -1, -1, 76, -1, -1, -1, -1, -1, -1, 76, 76, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, 77, 78, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, 78, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 83, -1, 79, 80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82, 81, -1, -1, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        { 185,  27,  24,   4,  51,   5 },
        {  52,  58,  64 },
        {  53,  54, 186,  55, 187,  57, 188,   4,  52 },
        {   0 },
        {  43, 189 },
        {  42, 190 },
        {  41, 191 },
        {  49, 192 },
        {  40,   7,  82, 193,   8 },
        { 194,   7,  82,   8 },
        { 196 },
        {  24, 197,  56 },
        {   9,  55 },
        {   0 },
        { 198,  10,  82, 199 },
        { 200 },
        {  59,   4,  58 },
        {   0 },
        {  36,  24, 201,  60, 202,  62, 203,   4,  51, 204 },
        {   2,  63, 205,  55, 206,   6,  53, 207,  61,   3 },
        {   0 },
        {   4,  63, 205,  55, 206,   6,  53, 207,  61 },
        {   0 },
        {   6,  53, 208 },
        { 209 },
        {  38, 210 },
        { 211,  37 },
        {  21,  66,  65,  22 },
        {   4,  66,  65 },
        {   0 },
        {  24, 212,  68 },
        {  64 },
        {  28,  71, 213,  30,  66,  67 },
        {  31,  71, 213,  32,  66 },
        {  33,   2, 214,  55,   3 },
        {  34,   2, 215,  69,   3 },
        {  35,  71, 216 },
        {   0 },
        {  29,  66 },
        {   0 },
        { 217,  11,  71, 218 },
        {   7, 219,  71, 220,   8,  11,  71, 218 },
        {   2, 221, 222,  69,   3 },
        { 224 },
        {  71, 225,  70 },
        {   9,  71, 225,  70 },
        {   0 },
        {  74, 226,  72 },
        {  73,  74 },
        {   0 },
        {  10, 228 },
        {  16, 229 },
        {  17, 230 },
        {  19, 231 },
        {  18, 232 },
        {  20, 233 },
        {  77, 234,  75 },
        {  76, 235,  77, 236,  75 },
        {   0 },
        {  15, 237 },
        {  14, 238 },
        {  46 },
        {  80, 240,  78 },
        {  79, 241,  80, 242,  78 },
        {   0 },
        {  12, 243 },
        {  13, 244 },
        {  39, 246 },
        {  47, 245 },
        {  48, 247,  80, 248 },
        {  14, 249,  80, 250 },
        {   2, 251,  71,   3, 252 },
        {  24, 212,  81, 253 },
        {  83, 254 },
        {   2, 255,  71, 225,  70,   3, 256 },
        {   7, 219,  71, 257,   8 },
        { 258 },
        {  24, 259 },
        {  83 },
        {  25, 260 },
        {  26, 261 },
        {  45, 262 },
        {  44, 263 },
        {  23, 264 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "Era esperado fim de programa",
        "Era esperado \"(\"",
        "Era esperado \")\"",
        "Era esperado \";\"",
        "Era esperado \".\"",
        "Era esperado \":\"",
        "Era esperado \"[\"",
        "Era esperado \"]\"",
        "Era esperado \",\"",
        "Era esperado \"=\"",
        "Era esperado \":=\"",
        "Era esperado \"*\"",
        "Era esperado \"/\"",
        "Era esperado \"-\"",
        "Era esperado \"+\"",
        "Era esperado \"<\"",
        "Era esperado \">\"",
        "Era esperado \"<=\"",
        "Era esperado \">=\"",
        "Era esperado \"<>\"",
        "Era esperado \"{\"",
        "Era esperado \"}\"",
        "Era esperado literal",
        "Era esperado id",
        "Era esperado num_int",
        "Era esperado num_real",
        "Era esperado programa",
        "Era esperado se",
        "Era esperado senao",
        "Era esperado entao",
        "Era esperado enquanto",
        "Era esperado faca",
        "Era esperado leia",
        "Era esperado escreva",
        "Era esperado retorne",
        "Era esperado metodo",
        "Era esperado val",
        "Era esperado ref",
        "Era esperado div",
        "Era esperado cadeia",
        "Era esperado booleano",
        "Era esperado real",
        "Era esperado inteiro",
        "Era esperado verdadeiro",
        "Era esperado falso",
        "Era esperado ou",
        "Era esperado e",
        "Era esperado nao",
        "Era esperado caracter",
        "<programa> inválido",
        "<bloco> inválido",
        "<dcl_var_const> inválido",
        "<tipo> inválido",
        "<dimensao> inválido",
        "<lid> inválido",
        "<rep_lid> inválido",
        "<fator_const> inválido",
        "<dcl_metodos> inválido",
        "<dcl_metodo> inválido",
        "<par_formais> inválido",
        "<rep_par> inválido",
        "<tipo_metodo> inválido",
        "<mp_par> inválido",
        "<com_composto> inválido",
        "<replistacomando> inválido",
        "<comando> inválido",
        "<senaoparte> inválido",
        "<rcomid> inválido",
        "<lista_expr> inválido",
        "<rep_lexpr> inválido",
        "<expressao> inválido",
        "<resto_expressao> inválido",
        "<oprel> inválido",
        "<expsimp> inválido",
        "<rep_expsimp> inválido",
        "<op_add> inválido",
        "<termo> inválido",
        "<rep_termo> inválido",
        "<op_mult> inválido",
        "<fator> inválido",
        "<rvar> inválido",
        "<constante> inválido",
        "<constante_explicita> inválido"
    };
}
